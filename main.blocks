<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id=";lxkJG4vL)CG#Cqc$y#D" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="BV_:m-T(Ze/oI!(=*+]C" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="declare interface Math {" line1="    floor(x: number): number;" line2="}" numlines="3"></mutation><next><block type="typescript_statement" id="Ua~EyuB@[lUy3SPz%nQJ" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace SSD1306 {" line1="" line2="    let font: Buffer;" line3="    let _i2c: I2C;" line4="" line5="    const SSD1306_SETCONTRAST = 0x81" line6="    const SSD1306_SETCOLUMNADRESS = 0x21" line7="    const SSD1306_SETPAGEADRESS = 0x22" line8="    const SSD1306_DISPLAYALLON_RESUME = 0xA4" line9="    const SSD1306_DISPLAYALLON = 0xA5" line10="    const SSD1306_NORMALDISPLAY = 0xA6" line11="    const SSD1306_INVERTDISPLAY = 0xA7" line12="    const SSD1306_DISPLAYOFF = 0xAE" line13="    const SSD1306_DISPLAYON = 0xAF" line14="    const SSD1306_SETDISPLAYOFFSET = 0xD3" line15="    const SSD1306_SETCOMPINS = 0xDA" line16="    const SSD1306_SETVCOMDETECT = 0xDB" line17="    const SSD1306_SETDISPLAYCLOCKDIV = 0xD5" line18="    const SSD1306_SETPRECHARGE = 0xD9" line19="    const SSD1306_SETMULTIPLEX = 0xA8" line20="    const SSD1306_SETLOWCOLUMN = 0x00" line21="    const SSD1306_SETHIGHCOLUMN = 0x10" line22="    const SSD1306_SETSTARTLINE = 0x40" line23="    const SSD1306_MEMORYMODE = 0x20" line24="    const SSD1306_COMSCANINC = 0xC0" line25="    const SSD1306_COMSCANDEC = 0xC8" line26="    const SSD1306_SEGREMAP = 0xA0" line27="    const SSD1306_CHARGEPUMP = 0x8D" line28="    const chipAdress = 0x3C" line29="    const xOffset = 0" line30="    const yOffset = 0" line31="    let charX = 0" line32="    let charY = 0" line33="    let displayWidth = 128" line34="    let displayHeight = 32 / 8" line35="    let screenSize = 0" line36="    //let font: Array&lt;Array&lt;number&gt;&gt;" line37="    let loadStarted: boolean;" line38="    let loadPercent: number;" line39="    function command(cmd: number) {" line40="        let buf = pins.createBuffer(2)" line41="        buf[0] = 0x00" line42="        buf[1] = cmd" line43="        _i2c.writeBuffer(chipAdress, buf, false)" line44="    }" line45="    //% block=&quot;clear OLED display&quot;" line46="    //% weight=3" line47="    export function clear() {" line48="        loadStarted = false" line49="        loadPercent = 0" line50="        command(SSD1306_SETCOLUMNADRESS)" line51="        command(0x00)" line52="        command(displayWidth - 1)" line53="        command(SSD1306_SETPAGEADRESS)" line54="        command(0x00)" line55="        command(displayHeight - 1)" line56="        let data = pins.createBuffer(17);" line57="        data[0] = 0x40; // Data Mode" line58="        for (let i = 1; i &lt; 17; i++) {" line59="            data[i] = 0x00" line60="        }" line61="        // send display buffer in 16 byte chunks" line62="        for (let j = 0; j &lt; screenSize; j += 16) {" line63="            //            pins.i2cWriteBuffer(chipAdress, data, false)" line64="            _i2c.writeBuffer(chipAdress, data, false)" line65="        }" line66="        charX = xOffset" line67="        charY = yOffset" line68="    }" line69="" line70="    /**" line71="     * " line72="     */" line73="    //% blockId=createI2C" line74="    //% block=&quot;create I2C at scl $scl and sda $sda &quot;" line75="    //" line76="    export function createI2C(scl: DigitalInOutPin, sda: DigitalInOutPin): void {" line77="        _i2c = pins.createI2C(sda, scl);" line78="    }" line79="" line80="    function drawLoadingFrame() {" line81="        command(SSD1306_SETCOLUMNADRESS)" line82="        command(0x00)" line83="        command(displayWidth - 1)" line84="        command(SSD1306_SETPAGEADRESS)" line85="        command(0x00)" line86="        command(displayHeight - 1)" line87="        let col = 0" line88="        let page = 0" line89="        let data2 = pins.createBuffer(17);" line90="        data2[0] = 0x40; // Data Mode" line91="        let k = 1" line92="        for (let page2 = 0; page2 &lt; displayHeight; page2++) {" line93="            for (let col2 = 0; col2 &lt; displayWidth; col2++) {" line94="                if (page2 === 3 &amp;&amp; col2 &gt; 12 &amp;&amp; col2 &lt; displayWidth - 12) {" line95="                    data2[k] = 0x60" line96="                } else if (page2 === 5 &amp;&amp; col2 &gt; 12 &amp;&amp; col2 &lt; displayWidth - 12) {" line97="                    data2[k] = 0x06" line98="                } else if (page2 === 4 &amp;&amp; (col2 === 12 || col2 === 13 || col2 === displayWidth - 12 || col2 === displayWidth - 13)) {" line99="                    data2[k] = 0xFF" line100="                } else {" line101="                    data2[k] = 0x00" line102="                }" line103="                if (k === 16) {" line104="                    _i2c.writeBuffer(chipAdress, data2, false)" line105="                    k = 1" line106="                } else {" line107="                    k++" line108="                }" line109="" line110="            }" line111="        }" line112="        charX = 30" line113="        charY = 2" line114="        writeString(&quot;Loading:&quot;)" line115="    }" line116="    function drawLoadingBar(percent: number) {" line117="        charX = 78" line118="        charY = 2" line119="        let num = Math.floor(percent)" line120="        writeNum(num)" line121="        writeString(&quot;%&quot;)" line122="        let width = displayWidth - 14 - 13" line123="        let lastStart = width * (loadPercent / displayWidth)" line124="        command(SSD1306_SETCOLUMNADRESS)" line125="        command(14 + lastStart)" line126="        command(displayWidth - 13)" line127="        command(SSD1306_SETPAGEADRESS)" line128="        command(4)" line129="        command(5)" line130="        let data3 = pins.createBuffer(2);" line131="        data3[0] = 0x40; // Data Mode" line132="        data3[1] = 0x7E" line133="        for (let l = lastStart; l &lt; width * (Math.floor(percent) / 100); l++) {" line134="            pins.i2cWriteBuffer(chipAdress, data3, false)" line135="        }" line136="        loadPercent = num" line137="    }" line138="" line139="    //% block=&quot;draw loading bar at $percent percent&quot;" line140="    //% percent.min=0 percent.max=100" line141="    //% weight=2" line142="    export function drawLoading(percent: number) {" line143="        if (loadStarted) {" line144="            drawLoadingBar(percent)" line145="        } else {" line146="            drawLoadingFrame()" line147="            drawLoadingBar(percent)" line148="            loadStarted = true" line149="        }" line150="    }" line151="" line152="" line153="    //% block=&quot;show (without newline) number $n&quot;" line154="    //% weight=5" line155="    export function writeNum(n: number) {" line156="        let numString = n.toString()" line157="        writeString(numString)" line158="    }" line159="    //% block=&quot;show string $str&quot;" line160="    //% weight=8" line161="    export function writeStringNewLine(str: string) {" line162="        writeString(str)" line163="        newLine()" line164="    }" line165="    //% block=&quot;show number $n&quot;" line166="    //% weight=7" line167="    export function writeNumNewLine(n: number) {" line168="        writeNum(n)" line169="        newLine()" line170="    }" line171="" line172="" line173="    function drawShape(pixels: Array&lt;Array&lt;number&gt;&gt;) {" line174="        let x1 = displayWidth" line175="        let y1 = displayHeight * 8" line176="        let x2 = 0" line177="        let y2 = 0" line178="        for (let m = 0; m &lt; pixels.length; m++) {" line179="            if (pixels[m][0] &lt; x1) {" line180="                x1 = pixels[m][0]" line181="            }" line182="            if (pixels[m][0] &gt; x2) {" line183="                x2 = pixels[m][0]" line184="            }" line185="            if (pixels[m][1] &lt; y1) {" line186="                y1 = pixels[m][1]" line187="            }" line188="            if (pixels[m][1] &gt; y2) {" line189="                y2 = pixels[m][1]" line190="            }" line191="        }" line192="        let page1 = Math.floor(y1 / 8)" line193="        let page22 = Math.floor(y2 / 8)" line194="        let line = pins.createBuffer(2)" line195="        line[0] = 0x40" line196="        for (let x = x1; x &lt;= x2; x++) {" line197="            for (let page3 = page1; page3 &lt;= page22; page3++) {" line198="                line[1] = 0x00" line199="                for (let n = 0; n &lt; pixels.length; n++) {" line200="                    if (pixels[n][0] === x) {" line201="                        if (Math.floor(pixels[n][1] / 8) === page3) {" line202="                            line[1] |= Math.pow(2, (pixels[n][1] % 8))" line203="                        }" line204="                    }" line205="                }" line206="                if (line[1] !== 0x00) {" line207="                    command(SSD1306_SETCOLUMNADRESS)" line208="                    command(x)" line209="                    command(x + 1)" line210="                    command(SSD1306_SETPAGEADRESS)" line211="                    command(page3)" line212="                    command(page3 + 1)" line213="                    //line[1] |= pins.i2cReadBuffer(chipAdress, 2)[1]" line214="                    pins.i2cWriteBuffer(chipAdress, line, false)" line215="                }" line216="            }" line217="        }" line218="    }" line219="" line220="    //% block=&quot;draw line from:|x: $x0 y: $y0 to| x: $x1 y: $y1&quot;" line221="    //% x0.defl=0" line222="    //% y0.defl=0" line223="    //% x1.defl=20" line224="    //% y1.defl=20" line225="    //% weight=1" line226="    export function drawLine(x0: number, y0: number, x1: number, y1: number) {" line227="        let pixels: Array&lt;Array&lt;number&gt;&gt; = []" line228="        let kx: number, ky: number, c: number, o: number, xx: number, yy: number, dx: number, dy: number;" line229="        let targetX = x1" line230="        let targetY = y1" line231="        x1 -= x0; kx = 0; if (x1 &gt; 0) kx = +1; if (x1 &lt; 0) { kx = -1; x1 = -x1; } x1++;" line232="        y1 -= y0; ky = 0; if (y1 &gt; 0) ky = +1; if (y1 &lt; 0) { ky = -1; y1 = -y1; } y1++;" line233="        if (x1 &gt;= y1) {" line234="            c = x1" line235="            for (o = 0; o &lt; x1; o++, x0 += kx) {" line236="                pixels.push([x0, y0])" line237="                c -= y1; if (c &lt;= 0) { if (o != x1 - 1) pixels.push([x0 + kx, y0]); c += x1; y0 += ky; if (o != x1 - 1) pixels.push([x0, y0]); }" line238="                if (pixels.length &gt; 20) {" line239="                    drawShape(pixels)" line240="                    pixels = []" line241="                    drawLine(x0, y0, targetX, targetY)" line242="                    return" line243="                }" line244="            }" line245="        } else {" line246="            c = y1" line247="            for (o = 0; o &lt; y1; o++, y0 += ky) {" line248="                pixels.push([x0, y0])" line249="                c -= x1; if (c &lt;= 0) { if (o != y1 - 1) pixels.push([x0, y0 + ky]); c += y1; x0 += kx; if (o != y1 - 1) pixels.push([x0, y0]); }" line250="                if (pixels.length &gt; 20) {" line251="                    drawShape(pixels)" line252="                    pixels = []" line253="                    drawLine(x0, y0, targetX, targetY)" line254="                    return" line255="                }" line256="            }" line257="        }" line258="        drawShape(pixels)" line259="    }" line260="" line261="    //% block=&quot;draw rectangle from:|x: $x0 y: $y0 to| x: $x1 y: $y1&quot;" line262="    //% x0.defl=0" line263="    //% y0.defl=0" line264="    //% x1.defl=20" line265="    //% y1.defl=20" line266="    //% weight=0" line267="    export function drawRectangle(x0: number, y0: number, x1: number, y1: number) {" line268="        drawLine(x0, y0, x1, y0)" line269="        drawLine(x0, y1, x1, y1)" line270="        drawLine(x0, y0, x0, y1)" line271="        drawLine(x1, y0, x1, y1)" line272="    }" line273="" line274="    //% block=&quot;insert newline&quot;" line275="    //% weight=4" line276="    export function newLine() {" line277="        charY++" line278="        charX = xOffset" line279="    }" line280="" line281="    //% block=&quot;show (without newline) string $str&quot;" line282="    //% weight=6" line283="    export function writeString(str: string) {" line284="        for (let p = 0; p &lt; str.length; p++) {" line285="            if (charX &gt; displayWidth - 6) {" line286="                newLine()" line287="            }" line288="            drawChar(charX, charY, str.charAt(p))" line289="            charX += 6" line290="        }" line291="    }" line292="" line293="    function drawChar(x: number, y: number, c: string) {" line294="        command(SSD1306_SETCOLUMNADRESS)" line295="        command(x)" line296="        command(x + 5)" line297="        command(SSD1306_SETPAGEADRESS)" line298="        command(y)" line299="        command(y + 1)" line300="        let line2 = pins.createBuffer(2)" line301="        line2[0] = 0x40" line302="        for (let q = 0; q &lt; 6; q++) {" line303="            if (q === 5) {" line304="                line2[1] = 0x00" line305="            } else {" line306="                let charIndex = c.charCodeAt(0)" line307="                let charNumber = font.getNumber(NumberFormat.UInt8BE, 5 * charIndex + q)" line308="                line2[1] = charNumber" line309="" line310="            }" line311="            //            pins.i2cWriteBuffer(chipAdress, line, false)" line312="            _i2c.writeBuffer(chipAdress, line2, false)" line313="        }" line314="" line315="    }" line316="    //% block=&quot;initialize OLED with width $width height $height&quot;" line317="    //% width.defl=128" line318="    //% height.defl=64" line319="    //% weight=9" line320="    export function init(width: number, height: number) {" line321="        command(SSD1306_DISPLAYOFF);" line322="        command(SSD1306_SETDISPLAYCLOCKDIV);" line323="        command(0x80);                                  // the suggested ratio 0x80" line324="        command(SSD1306_SETMULTIPLEX);" line325="        command(0x3F);" line326="        command(SSD1306_SETDISPLAYOFFSET);" line327="        command(0x0);                                   // no offset" line328="        command(SSD1306_SETSTARTLINE | 0x0);            // line #0" line329="        command(SSD1306_CHARGEPUMP);" line330="        command(0x14);" line331="        command(SSD1306_MEMORYMODE);" line332="        command(0x00);                                  // 0x0 act like ks0108" line333="        command(SSD1306_SEGREMAP | 0x1);" line334="        command(SSD1306_COMSCANDEC);" line335="        command(SSD1306_SETCOMPINS);" line336="        command(0x12);" line337="        command(SSD1306_SETCONTRAST);" line338="        command(0xCF);" line339="        command(SSD1306_SETPRECHARGE);" line340="        command(0xF1);" line341="        command(SSD1306_SETVCOMDETECT);" line342="        command(0x40);" line343="        command(SSD1306_DISPLAYALLON_RESUME);" line344="        command(SSD1306_NORMALDISPLAY);" line345="        command(SSD1306_DISPLAYON);" line346="        displayWidth = width" line347="        displayHeight = height / 8" line348="        screenSize = displayWidth * displayHeight" line349="        charX = xOffset" line350="        charY = yOffset" line351="        font = hex`" line352="    0000000000" line353="    3E5B4F5B3E" line354="    3E6B4F6B3E" line355="    1C3E7C3E1C" line356="    183C7E3C18" line357="    1C577D571C" line358="    1C5E7F5E1C" line359="    00183C1800" line360="    FFE7C3E7FF" line361="    0018241800" line362="    FFE7DBE7FF" line363="    30483A060E" line364="    2629792926" line365="    407F050507" line366="    407F05253F" line367="    5A3CE73C5A" line368="    7F3E1C1C08" line369="    081C1C3E7F" line370="    14227F2214" line371="    5F5F005F5F" line372="    06097F017F" line373="    006689956A" line374="    6060606060" line375="    94A2FFA294" line376="    08047E0408" line377="    10207E2010" line378="    08082A1C08" line379="    081C2A0808" line380="    1E10101010" line381="    0C1E0C1E0C" line382="    30383E3830" line383="    060E3E0E06" line384="    0000000000" line385="    00005F0000" line386="    0007000700" line387="    147F147F14" line388="    242A7F2A12" line389="    2313086462" line390="    3649562050" line391="    0008070300" line392="    001C224100" line393="    0041221C00" line394="    2A1C7F1C2A" line395="    08083E0808" line396="    0080703000" line397="    0808080808" line398="    0000606000" line399="    2010080402" line400="    3E5149453E" line401="    00427F4000" line402="    7249494946" line403="    2141494D33" line404="    1814127F10" line405="    2745454539" line406="    3C4A494931" line407="    4121110907" line408="    3649494936" line409="    464949291E" line410="    0000140000" line411="    0040340000" line412="    0008142241" line413="    1414141414" line414="    0041221408" line415="    0201590906" line416="    3E415D594E" line417="    7C1211127C" line418="    7F49494936" line419="    3E41414122" line420="    7F4141413E" line421="    7F49494941" line422="    7F09090901" line423="    3E41415173" line424="    7F0808087F" line425="    00417F4100" line426="    2040413F01" line427="    7F08142241" line428="    7F40404040" line429="    7F021C027F" line430="    7F0408107F" line431="    3E4141413E" line432="    7F09090906" line433="    3E4151215E" line434="    7F09192946" line435="    2649494932" line436="    03017F0103" line437="    3F4040403F" line438="    1F2040201F" line439="    3F4038403F" line440="    6314081463" line441="    0304780403" line442="    6159494D43" line443="    007F414141" line444="    0204081020" line445="    004141417F" line446="    0402010204" line447="    4040404040" line448="    0003070800" line449="    2054547840" line450="    7F28444438" line451="    3844444428" line452="    384444287F" line453="    3854545418" line454="    00087E0902" line455="    18A4A49C78" line456="    7F08040478" line457="    00447D4000" line458="    2040403D00" line459="    7F10284400" line460="    00417F4000" line461="    7C04780478" line462="    7C08040478" line463="    3844444438" line464="    FC18242418" line465="    18242418FC" line466="    7C08040408" line467="    4854545424" line468="    04043F4424" line469="    3C4040207C" line470="    1C2040201C" line471="    3C4030403C" line472="    4428102844" line473="    4C9090907C" line474="    4464544C44" line475="    0008364100" line476="    0000770000" line477="    0041360800" line478="    0201020402" line479="    3C2623263C" line480="    1EA1A16112" line481="    3A4040207A" line482="    3854545559" line483="    2155557941" line484="    2154547841" line485="    2155547840" line486="    2054557940" line487="    0C1E527212" line488="    3955555559" line489="    3954545459" line490="    3955545458" line491="    0000457C41" line492="    0002457D42" line493="    0001457C40" line494="    F0292429F0" line495="    F0282528F0" line496="    7C54554500" line497="    2054547C54" line498="    7C0A097F49" line499="    3249494932" line500="    3248484832" line501="    324A484830" line502="    3A4141217A" line503="    3A42402078" line504="    009DA0A07D" line505="    3944444439" line506="    3D4040403D" line507="    3C24FF2424" line508="    487E494366" line509="    2B2FFC2F2B" line510="    FF0929F620" line511="    C0887E0903" line512="    2054547941" line513="    0000447D41" line514="    3048484A32" line515="    384040227A" line516="    007A0A0A72" line517="    7D0D19317D" line518="    2629292F28" line519="    2629292926" line520="    30484D4020" line521="    3808080808" line522="    0808080838" line523="    2F10C8ACBA" line524="    2F102834FA" line525="    00007B0000" line526="    08142A1422" line527="    22142A1408" line528="    AA005500AA" line529="    AA55AA55AA" line530="    000000FF00" line531="    101010FF00" line532="    141414FF00" line533="    1010FF00FF" line534="    1010F010F0" line535="    141414FC00" line536="    1414F700FF" line537="    0000FF00FF" line538="    1414F404FC" line539="    141417101F" line540="    10101F101F" line541="    1414141F00" line542="    101010F000" line543="    0000001F10" line544="    1010101F10" line545="    101010F010" line546="    000000FF10" line547="    1010101010" line548="    101010FF10" line549="    000000FF14" line550="    0000FF00FF" line551="    00001F1017" line552="    0000FC04F4" line553="    1414171017" line554="    1414F404F4" line555="    0000FF00F7" line556="    1414141414" line557="    1414F700F7" line558="    1414141714" line559="    10101F101F" line560="    141414F414" line561="    1010F010F0" line562="    00001F101F" line563="    0000001F14" line564="    000000FC14" line565="    0000F010F0" line566="    1010FF10FF" line567="    141414FF14" line568="    1010101F00" line569="    000000F010" line570="    FFFFFFFFFF" line571="    F0F0F0F0F0" line572="    FFFFFF0000" line573="    000000FFFF" line574="    0F0F0F0F0F" line575="    3844443844" line576="    7C2A2A3E14" line577="    7E02020606" line578="    027E027E02" line579="    6355494163" line580="    3844443C04" line581="    407E201E20" line582="    06027E0202" line583="    99A5E7A599" line584="    1C2A492A1C" line585="    4C7201724C" line586="    304A4D4D30" line587="    3048784830" line588="    BC625A463D" line589="    3E49494900" line590="    7E0101017E" line591="    2A2A2A2A2A" line592="    44445F4444" line593="    40514A4440" line594="    40444A5140" line595="    0000FF0103" line596="    E080FF0000" line597="    08086B6B08" line598="    3612362436" line599="    060F090F06" line600="    0000181800" line601="    0000101000" line602="    3040FF0101" line603="    001F01011E" line604="    00191D1712" line605="    003C3C3C3C" line606="    0000000000`" line607="        loadStarted = false" line608="        loadPercent = 0" line609="        clear()" line610="    }" line611="" line612="" line613="}" numlines="614"></mutation></block></next></block></statement></block></xml>